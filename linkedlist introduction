#include <bits/stdc++.h>
using namespace std;

// 🔹 Node structure
class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = NULL;
    }
};

// 🔹 Insert Node at Any Position
void insertAtPosition(Node*& head, int data, int pos) {
    Node* newNode = new Node(data);

    // Insert at beginning
    if (pos == 1) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    for (int i = 1; i < pos - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "❌ Invalid position!\n";
        delete newNode;
        return;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}

// 🔹 Delete Node from Given Position
void deleteAtPosition(Node*& head, int pos) {
    if (head == NULL) {
        cout << "❌ List is empty!\n";
        return;
    }

    Node* temp = head;

    // Delete first node
    if (pos == 1) {
        head = head->next;
        delete temp;
        return;
    }

    for (int i = 1; temp != NULL && i < pos - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) {
        cout << "❌ Invalid position!\n";
        return;
    }

    Node* del = temp->next;
    temp->next = temp->next->next;
    delete del;
}

// 🔹 Search a Node in Linked List
bool searchNode(Node* head, int key) {
    Node* temp = head;
    while (temp != NULL) {
        if (temp->data == key)
            return true;
        temp = temp->next;
    }
    return false;
}

// 🔹 Count Total Nodes in Linked List
int countNodes(Node* head) {
    int count = 0;
    Node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

// 🔹 Print the Linked List
void printList(Node* head) {
    cout << "Linked List: ";
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    Node* head = NULL;

    // Insert some nodes
    insertAtPosition(head, 10, 1);
    insertAtPosition(head, 20, 2);
    insertAtPosition(head, 30, 3);
    insertAtPosition(head, 15, 2); // inserting at position 2
    printList(head);

    // Delete a node
    deleteAtPosition(head, 3);
    cout << "After deleting 3rd node:\n";
    printList(head);

    // Search for a node
    int key = 20;
    if (searchNode(head, key))
        cout << "✅ Node with value " << key << " found in list.\n";
    else
        cout << "❌ Node with value " << key << " not found.\n";

    // Count nodes
    cout << "Total nodes in linked list: " << countNodes(head) << endl;

    return 0;
}
