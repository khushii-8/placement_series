#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left, *right;
    Node(int val) { data = val; left = right = NULL; }
};

// ðŸ”¹ Height of Tree
int height(Node* root) {
    if(!root) return 0;
    return 1 + max(height(root->left), height(root->right));
}

// ðŸ”¹ Check if Two Trees are Same
bool isSame(Node* p, Node* q) {
    if(!p && !q) return true;
    if(!p || !q || p->data != q->data) return false;
    return isSame(p->left, q->left) && isSame(p->right, q->right);
}

// ðŸ”¹ Check if Tree is Symmetric (Mirror of itself)
bool isMirror(Node* a, Node* b) {
    if(!a && !b) return true;
    if(!a || !b || a->data != b->data) return false;
    return isMirror(a->left, b->right) && isMirror(a->right, b->left);
}
bool isSymmetric(Node* root) {
    if(!root) return true;
    return isMirror(root->left, root->right);
}

int main() {
    Node* root1 = new Node(1);
    root1->left = new Node(2);
    root1->right = new Node(2);
    root1->left->left = new Node(3);
    root1->right->right = new Node(3);

    Node* root2 = new Node(1);
    root2->left = new Node(2);
    root2->right = new Node(2);
    
    cout << "Height: " << height(root1) << endl;
    cout << "Same Tree: " << (isSame(root1, root2) ? "Yes" : "No") << endl;
    cout << "Symmetric: " << (isSymmetric(root1) ? "Yes" : "No") << endl;
}
