#include <bits/stdc++.h>
using namespace std;

// 1️⃣ Search in Rotated Sorted Array (no duplicates)
int searchRotated(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (nums[mid] == target)
            return mid;

        // Left half sorted
        if (nums[low] <= nums[mid]) {
            if (target >= nums[low] && target < nums[mid])
                high = mid - 1;
            else
                low = mid + 1;
        }
        // Right half sorted
        else {
            if (target > nums[mid] && target <= nums[high])
                low = mid + 1;
            else
                high = mid - 1;
        }
    }
    return -1;
}

// 2️⃣ Search in Rotated Sorted Array II (with duplicates)
bool searchRotatedII(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (nums[mid] == target)
            return true;

        // Skip duplicates
        if (nums[low] == nums[mid] && nums[mid] == nums[high]) {
            low++;
            high--;
            continue;
        }

        // Left half sorted
        if (nums[low] <= nums[mid]) {
            if (target >= nums[low] && target < nums[mid])
                high = mid - 1;
            else
                low = mid + 1;
        } else {
            if (target > nums[mid] && target <= nums[high])
                low = mid + 1;
            else
                high = mid - 1;
        }
    }
    return false;
}

// 3️⃣ Aggressive Cows (Binary Search on Answer)
bool canPlaceCows(vector<int>& stalls, int cows, int dist) {
    int count = 1, lastPos = stalls[0];
    for (int i = 1; i < stalls.size(); i++) {
        if (stalls[i] - lastPos >= dist) {
            count++;
            lastPos = stalls[i];
        }
    }
    return count >= cows;
}

int aggressiveCows(vector<int>& stalls, int cows) {
    sort(stalls.begin(), stalls.end());
    int low = 1, high = stalls.back() - stalls.front(), ans = 0;

    while (low <= high) {
        int mid = (low + high) / 2;
        if (canPlaceCows(stalls, cows, mid)) {
            ans = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return ans;
}

int main() {
    // 1️⃣ Search in Rotated Sorted Array
    vector<int> nums = {4,5,6,7,0,1,2};
    int target = 0;
    cout << "Index of target (no duplicates): " << searchRotated(nums, target) << endl;

    // 2️⃣ Search in Rotated Sorted Array II
    vector<int> nums2 = {2,5,6,0,0,1,2};
    cout << "Target found (with duplicates)? " << (searchRotatedII(nums2, 0) ? "Yes" : "No") << endl;

    // 3️⃣ Aggressive Cows
    vector<int> stalls = {1, 2, 8, 4, 9};
    int cows = 3;
    cout << "Maximum minimum distance between cows: " << aggressiveCows(stalls, cows) << endl;

    return 0;
}
