#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left, *right;
    Node(int val) { data = val; left = right = NULL; }
};

void preorder(Node* root) {         // Root → Left → Right
    if(!root) return;
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root) {          // Left → Root → Right
    if(!root) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void postorder(Node* root) {        // Left → Right → Root
    if(!root) return;
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

void levelOrder(Node* root) {       // BFS Traversal
    if(!root) return;
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        Node* cur = q.front(); q.pop();
        cout << cur->data << " ";
        if(cur->left) q.push(cur->left);
        if(cur->right) q.push(cur->right);
    }
}

void morrisInorder(Node* root) {    // Inorder without recursion/stack
    Node* cur = root;
    while(cur) {
        if(!cur->left) {
            cout << cur->data << " ";
            cur = cur->right;
        } else {
            Node* pre = cur->left;
            while(pre->right && pre->right != cur)
                pre = pre->right;
            if(!pre->right) {
                pre->right = cur;
                cur = cur->left;
            } else {
                pre->right = NULL;
                cout << cur->data << " ";
                cur = cur->right;
            }
        }
    }
}

int main() {
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);

    cout << "Preorder: "; preorder(root); cout << endl;
    cout << "Inorder: "; inorder(root); cout << endl;
    cout << "Postorder: "; postorder(root); cout << endl;
    cout << "Level Order: "; levelOrder(root); cout << endl;
    cout << "Morris Inorder: "; morrisInorder(root); cout << endl;
}
