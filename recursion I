#include <bits/stdc++.h>
using namespace std;

// 1️⃣ Factorial using recursion
int factorial(int n) {
    if (n == 0 || n == 1) return 1;
    return n * factorial(n - 1);
}

// 2️⃣ Power of a number (x^n)
int power(int x, int n) {
    if (n == 0) return 1;
    return x * power(x, n - 1);
}

// 3️⃣ Print increasing numbers
void printIncreasing(int n) {
    if (n == 0) return;
    printIncreasing(n - 1);
    cout << n << " ";
}

// 4️⃣ Print decreasing numbers
void printDecreasing(int n) {
    if (n == 0) return;
    cout << n << " ";
    printDecreasing(n - 1);
}

// 5️⃣ Print Decreasing-Increasing pattern
void printDecInc(int n) {
    if (n == 0) return;
    cout << n << " ";       // decreasing
    printDecInc(n - 1);
    cout << n << " ";       // increasing
}

// 6️⃣ Count digits of a number
int countDigits(int n) {
    if (n == 0) return 0;
    return 1 + countDigits(n / 10);
}

// 7️⃣ Sum of array using recursion
int sumArray(int arr[], int n) {
    if (n == 0) return 0;
    return arr[n - 1] + sumArray(arr, n - 1);
}

int main() {
    // Input for demonstration
    int n = 5;
    cout << "Factorial of " << n << " = " << factorial(n) << endl;

    int x = 2, p = 5;
    cout << "Power(" << x << "^" << p << ") = " << power(x, p) << endl;

    cout << "\nIncreasing order: ";
    printIncreasing(n);
    cout << "\nDecreasing order: ";
    printDecreasing(n);
    cout << "\nDecreasing-Increasing pattern: ";
    printDecInc(n);

    int num = 12345;
    cout << "\n\nCount of digits in " << num << " = " << countDigits(num) << endl;

    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << "Sum of array = " << sumArray(arr, size) << endl;

    return 0;
}
